#!/bin/sh

set -e

mkdir -p ~/.config/shaur && cd ~/.config/shaur

dbupdate () (
	echo "[AUR database update]"
	curl -s --url 'https://aur.archlinux.org/packages.gz' --create-dirs --output "packages.gz" >/dev/null && gunzip -f "packages.gz"
	sort -o packages packages
)

key () (
	key=$(grep '^validpgpkeys' < PKGBUILD | cut -d"(" -f2  | cut -d")" -f1 | tr -d "'")
	if [ "$key" ]; then gpg --recv-keys "$key"; fi
)

downloadPackage () (
	[ -d "$1" ] && rm -rf "$1"
	git clone "https://aur.archlinux.org/$1.git" >/dev/null
)

installPackage () (
	cd "$1" && (key; makepkg -si)
)

upgradePackage () (
	# fix: sometimes there is no zst file, in the cloned folder (upgrade)
	cd "$1" && (sudo pacman -U -- *.zst; makepkg -si)
)

upgrade () (
	dbupdate
	
	pacman -Qm > AurInstalled
	sort -o AurInstalled AurInstalled

	while read -r x; do
		name=$(echo "$x" | awk '{print $1}')
		version=$(echo "$x" | awk '{print $2}')
		vRemote=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=$name" | jq '.results[]' | jq "select(.Name==\"$name\")" | jq -r '.Version')
		
		if [ "$(vercmp "${version}" "${vRemote}")" -lt 0 ]; then
			echo "[$name] $version to -> $vRemote"
			
			PackageBase=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=$name" | jq '.results[]' | jq "select(.Name==\"$name\")" | jq -r '.PackageBase')

			if [ "$PackageBase" ]; then
				downloadPackage "$PackageBase" && upgradePackage "$PackageBase"
			else
				echo "ERROR 404: $name NOT FOUND..."
			fi
		fi
	done < AurInstalled
)

sync () (
	! [ -f packages ] && echo "DB not found, type: shaur -y" && exit
	
	op=$(echo "$1" | cut -d " " -f2-)

	if [ "$1" = "$op" ]; then
		name=$(sk -m --bind change:top --layout=reverse --preview "curl -s \"https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=\"{}\"\" | jq '.results[]' > tmp && jq 'select(.Name==\"{}\")' < tmp" < packages)
	else
		name="$op"
	fi

	for i in $name; do
		PackageBase=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=$i" | jq '.results[]' | jq "select(.Name==\"$i\")" | jq -r '.PackageBase')

		if [ "$PackageBase" ]; then
			downloadPackage "$PackageBase" && installPackage "$PackageBase"
		else
			echo "ERROR 404: $name NOT FOUND..."
		fi
	done
)

remove () {
	pacman -Qqm > AurInstalled
	sort -o AurInstalled AurInstalled

	op=$(echo "$2" | cut -d " " -f2-)

	if [ "$1" = "$op" ]; then
		name=$(sk -m --bind change:top --layout=reverse --preview "curl -s \"https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=\"{}\"\" | jq '.results[]' > tmp && jq 'select(.Name==\"{}\")' < tmp" < AurInstalled )
	else
		name="$op"
	fi
		
	# improve
	for i in $name; do sudo pacman --noconfirm "$1" "$i"; done
}

removeCache () {
	echo "Cache directory: ~/config/shaur"
	printf "do you want to remove ALL cached packages? [y/N]: "
	read -r rep

	case $rep in
		([y]|[Y]|"") rm -rf -- */ ;;
		(*) echo "Interrupting" ;;
	esac
}

query () (
	pacman -Qqm > AurInstalled
	sort -o AurInstalled AurInstalled

	op=$(echo "$1" | cut -d " " -f2-)

	if [ "$1" = "$op" ]; then
		name=$(sk -m --bind change:top --layout=reverse --preview "curl -s \"https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=\"{}\"\" | jq '.results[]' > tmp && jq 'select(.Name==\"{}\")' < tmp" < AurInstalled )
	else
		name="$op"
	fi

	for i in $name; do
		curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=$i" | jq '.results[]' | jq "select(.Name==\"$i\")" > tmp
		cat ./tmp
	done
)

version () (
	echo "shaur version: *"
)

getHelp() (
	echo "Usage:
	shaur <operation> (you can use only one option) 

Operations:
	-h --help
	-U --upgrade 		
	-S --sync
	-R --remove
	-C --removeCache
	-Q --query
	-V --version
	-y --dbupdate"
)

[ ! "$*" ] && getHelp && exit

case $1 in
	-y | --dbupdate) dbupdate ;;
	-U | --upgrade) upgrade ;;
	-S | --sync) sync "$*" ;;
	-R*| --remove) remove "$1" "$*" ;;
	-C | --removeCache ) removeCache ;;
	-Q | --query ) query "$*" ;;
	-V | --version ) version ;;
	-h | --help) getHelp ;;
	*)
		echo "shaur -> invalid option $*"
		echo "Try shaur -h or --help for more information"
	;;
esac
