#!/bin/sh

set -e

mkdir -p ~/.config/shaur && cd ~/.config/shaur || exit

dbupdate () (
	echo "[AUR database update]"
	curl -s --url 'https://aur.archlinux.org/packages.gz' --create-dirs --output "packages.gz" >/dev/null && gunzip -f "packages.gz"
	sort -o packages packages
)

upgrade () (
	dbupdate
	
	pacman -Qm > AurInstalled
	sort -o AurInstalled AurInstalled

	while read -r x; do
		name=$(echo "$x" | awk '{print $1}')
		version=$(echo "$x" | awk '{print $2}')
		vRemote=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=$name" | jq '.results[]' | jq "select(.Name==\"$name\")" | jq -r '.Version')
		
		if [ $(vercmp "${version}" "${vRemote}") -lt 0 ]; then
			echo "[$name] $version to -> $vRemote"
			
			PackageBase=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=$name" | jq '.results[]' | jq "select(.Name==\"$name\")" | jq '.PackageBase')
			
			if [ "$PackageBase" ]; then
				[ -d "$PackageBase" ] && rm -rf "$PackageBase"
				git clone https://aur.archlinux.org/"$PackageBase".git || exit
				cd "$PackageBase" || exit
				makepkg -si
			fi
		fi
	done < AurInstalled
)

sync () (#!/bin/sh
2
​
3
# jq -r per rimuovere le "" dall'output
4
​
5
set -e
6
​
7
mkdir -p ~/.config/shaur && cd ~/.config/shaur || exit
8
​
9
dbupdate () (
10
        echo "[AUR database update]"
11
        curl -s --url 'https://aur.archlinux.org/packages.gz' --create-dirs --output "packages.gz" >/dev/null && gunzip -f "packages.gz"
12
        sort -o packages packages
13
)
14
​
15
upgrade () (
16
        dbupdate
17
        
18
        pacman -Qm > AurInstalled
19
        sort -o AurInstalled AurInstalled
20
​
21
        while read -r x; do
22
                name=$(echo "$x" | awk '{print $1}')
23
                version=$(echo "$x" | awk '{print $2}')
24
                vRemote=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=$name" | jq '.results[]' | jq "select(.Name==\"$name\")" | jq '.Version')
25
                
26
                if [ $(vercmp "${version}" "${vRemote}") -lt 0 ]; then
27
                        echo "[$name] $version to -> $vRemote"
28
                        
29
                        PackageBase=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=$name" | jq '.results[]' | jq "select(.Name==\"$name\")" | jq '.PackageBase')
30
                        
31
                        # fix
32
                        if [ -d "$PackageBase" ]; then
33
                                if [ "$PackageBase" ]; then
34
                                        cd "$PackageBase" || exit
35
                                        git pull
36
                                        makepkg -si
37
                                        cd ..
38
                                fi
39
                        else
40
                                if [ "$PackageBase" ]; then
41
                                        git clone https://aur.archlinux.org/"$PackageBase".git || exit
42
                                        cd "$PackageBase" || exit
43
                                        makepkg -si
44
                                        cd ..
45
                                fi
	! [ -f packages ] && echo "DB not found, type: shaur -y" && exit
	
	op=$(echo "$1" | cut -d " " -f2-)

	if [[ "$1" == "$op" ]]; then
		name=$(sk -m --bind change:top --layout=reverse --preview "curl -s \"https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=\"{}\"\" | jq '.results[]' > tmp && jq 'select(.Name==\"{}\")' < tmp" < packages)
	else
		name="$op"
	fi

	for i in $name; do
		PackageBase=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=$i" | jq '.results[]' | jq "select(.Name==\"$i\")" | jq -r '.PackageBase')
		if [ "$PackageBase" ]; then
			[ -d "$PackageBase" ] && rm -rf "$PackageBase"
			git clone https://aur.archlinux.org/"$PackageBase".git || exit
			cd "$PackageBase" || exit
			makepkg -si
		else
			echo ""
			echo "ERROR 404: $i PACKAGES NOT FOUND..."
		fi
	done
)

remove () {
	pacman -Qqm > AurInstalled
	sort -o AurInstalled AurInstalled

	op=$(echo "$2" | cut -d " " -f2-)

	if [[ "$1" == "$op" ]]; then
		name=$(sk -m --bind change:top --layout=reverse --preview "curl -s \"https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=\"{}\"\" | jq '.results[]' > tmp && jq 'select(.Name==\"{}\")' < tmp" < AurInstalled )
	else
		name="$op"
	fi
		
	# fix
	for i in $name; do sudo pacman --noconfirm "$1" "$i"; done
}

removeCache () {
	echo "Cache directory: ~/config/shaur"
	printf "do you want to remove ALL cached packages? [y/N]: "
	read -r rep

	case $rep in
		([y]|[Y]|"") rm -rf -- */ ;;
		(*) echo "Interrupting" ;;
	esac
}

query () (
	pacman -Qqm > AurInstalled
	sort -o AurInstalled AurInstalled

	pacman -Qqm > AurInstalled
	sort -o AurInstalled AurInstalled

	op=$(echo "$1" | cut -d " " -f2-)

	if [[ "$1" == "$op" ]]; then
		name=$(sk -m --bind change:top --layout=reverse --preview "curl -s \"https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=\"{}\"\" | jq '.results[]' > tmp && jq 'select(.Name==\"{}\")' < tmp" < AurInstalled )
	else
		name="$op"
	fi

	for i in $(echo "$name") ; do
		curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg="$i"" | jq '.results[]' | jq "select(.Name==\"$name\")" > tmp
		cat ./tmp
	done
)

version () (
	echo "shaur version: *"
)

myHelp () (
	echo "Usage:
	shaur <operation> (you can use only one option) 

Operations:
	-h --help
	-U --upgrade 		
	-S --sync
	-R --remove
	-C --removeCache
	-Q --query
	-V --version
	-y --dbupdate"
)

[ ! "$*" ] && help && exit

case $1 in
	-y | --dbupdate) dbupdate ;;
	-U | --upgrade) upgrade ;;
	-S | --sync) sync "$*" ;;
	-R*| --remove) remove "$1" "$*" ;;
	-C | --removeCache ) removeCache ;;
	-Q | --query ) query "$*" ;;
	-V | --version ) version ;;
	-h | --help) myHelp ;;
	*)
		echo "shaur -> invalid option $*"
		echo "Try shaur -h or --help for more information"
	;;
esac
