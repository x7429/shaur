#!/bin/sh

set -e

mkdir -p ~/.config/shaur && cd ~/.config/shaur || exit

dbupdate () (
	echo "[AUR database update]"
	curl -s --url 'https://aur.archlinux.org/packages.gz' --create-dirs --output "packages.gz" >/dev/null && gunzip -f "packages.gz"
	sort -o packages packages
)

upgrade () (
	dbupdate
	
	pacman -Qm > AurInstalled
	sort -o AurInstalled AurInstalled

	while read -r x; do
		name=$(echo "$x" | awk '{print $1}')
		version=$(echo "$x" | awk '{print $2}')
		vRemote=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=$name" | jq '.results[]' | jq "select(.Name==\"$name\")" | jq '.Version' | tr -d "\"")
		
		if [[ ${vRemote} && ${version} && $(vercmp "${version}" "${vRemote}") -lt 0 ]]; then
			echo "[$name] $version to -> $vRemote"
			
			PackageBase=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=$name" | jq '.results[]' | jq "select(.Name==\"$name\")" | jq '.PackageBase' | tr -d "\"")
			
			if [ -d "$PackageBase" ]; then
				if [ "$PackageBase" ]; then
					cd "$PackageBase" || exit
					git pull
					makepkg -si
					cd ..
				fi
			else
				if [ "$PackageBase" ]; then
					git clone https://aur.archlinux.org/"$PackageBase".git || exit
					cd "$PackageBase" || exit
					makepkg -si
					cd ..
				fi
			fi
		fi
	done < AurInstalled
)

sync () (
	! [ -f packages ] && echo "DB not found, type: shaur -y" && exit
	name=$(sk -m --bind change:top --layout=reverse --preview "curl -s \"https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=\"{}\"\" | jq '.results[]' > tmp && jq 'select(.Name==\"{}\")' < tmp" < packages)
	
	# fix
	PackageBase=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=$name" | jq '.results[]' | jq "select(.Name==\"$name\")" | jq '.PackageBase' | tr -d "\"")
	if [ "$PackageBase" ]; then
		if [ -d "$PackageBase" ]; then
			rm -rf "$PackageBase"
		fi
		git clone https://aur.archlinux.org/"$PackageBase".git || exit
		cd "$PackageBase" || exit
		makepkg -si
	fi
)

remove () {
	pacman -Qqm > AurInstalled
	sort -o AurInstalled AurInstalled

	name=$(sk -m --bind change:top --layout=reverse --preview "curl -s \"https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=\"{}\"\" | jq '.results[]' > tmp && jq 'select(.Name==\"{}\")' < tmp" < AurInstalled )
	[ "$name" ] && sudo pacman "$1" "$name"
	
}

removeCache () {
	echo "Cache directory: ~/config/shaur"
	printf 'do you want to remove ALL cached packages? [y/N]: '
	read -r rep

	case $rep in
		([y]|[Y]|"")
			rm -rf -- */
		;;
		(*)
			echo "Interrupting"
		;;
	esac
}

version () (
	echo "shaur version: *"
)

help () (
	echo "Usage:
shaur <operation> (you can use only one option) 

Operations:
	-h --help
	-U --upgrade 		
	-S --sync
	-R --remove
	-C --removeCache
	-V --version
	-y --dbupdate"
)

[ ! "$*" ] && help && exit
case $1 in
	-y | --dbupdate)
		dbupdate
	;;
	-U | --upgrade)
		upgrade
	;;
	-S | --sync)
		sync
	;;
	-R* | --remove)
		remove "$1"
	;;
	-C | --removeCache )
		removeCache
	;;
	-V | --version )
		version
	;;
	-h | --help)
		help
	;;		
	*)
		echo "shaur -> invalid option $*"
		echo "Try shaur -h or --help for more information"
	;;
esac
