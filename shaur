#!/bin/sh

mkdir -p ~/.config/shaur && cd ~/.config/shaur || exit

dbupdate () (
	echo "[AUR database update]"
	curl -s --url 'https://aur.archlinux.org/packages.gz' --create-dirs --output "packages.gz" >/dev/null && gunzip -f "packages.gz"
	sort -o packages packages
)

upgrade () (
	dbupdate
	
	isUpgraded=0;
	i=1
	pacman -Qm > AurInstalled
	sort -o AurInstalled AurInstalled

	while [[ $i -le $(eval "cat AurInstalled | wc -l") ]]; do
		name=$(cat AurInstalled | tail -$i | head -n1 | awk {'print $1'})
		version=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=$name" | jq '.results[]' | jq "select(.Name==\"$name\")" | jq '.Version')	
		version=$(echo "$version" | tr -d "\"")
		versionInstalled=$(cat AurInstalled | tail -$i | head -n1 | awk {'print $2'})
		
		if [[ ${version} && ${versionInstalled} && $(vercmp "${versionInstalled}" "${version}") -lt 0 ]]; then
				
			echo " "
			echo "upgrade $name"
			echo "from $versionInstalled to -> $version"
			PackageBase=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=$name" | jq '.results[]' | jq "select(.Name==\"$name\")" | jq '.PackageBase')
			PackageBase=$(echo "$PackageBase" | tr -d "\"")
			echo "$PackageBase"
			
			if [ -d "$PackageBase" ]; then
				if [ "$PackageBase" ]; then
					cd "$PackageBase" || exit
					git pull
					makepkg -si
					cd ..
					isUpgraded=1;
				fi
			else
				if [ "$PackageBase" ]; then
					git clone https://aur.archlinux.org/"$PackageBase".git || exit
					cd "$PackageBase" || exit
					makepkg -si
					cd ..
					isUpgraded=1;
				fi
			fi
		fi	
		((i++))
	done
	if [[ "$isUpgraded" == 0 ]]; then
		echo "nothing to upgrade..."
	fi
)

sync () (
	! [ -f packages ] && echo "DB not found, type: shaur -y" && exit
	name=$(sk --bind change:top --layout=reverse --preview "curl -s \"https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=\"{}\"\" | jq '.results[]' > tmp && jq 'select(.Name==\"{}\")' < tmp" < packages)
	
	# fix
	PackageBase=$(curl -s "https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=$name" | jq '.results[]' | jq "select(.Name==\"$name\")" | jq '.PackageBase')
	PackageBase=$(echo "$PackageBase" | tr -d "\"")
	if [ "$PackageBase" ]; then
		if [[ -d "$PackageBase" ]]; then
			rm -rf "$PackageBase"
		fi
		git clone https://aur.archlinux.org/"$PackageBase".git || exit
		cd "$PackageBase" || exit
		makepkg -si
	fi
)

remove () {
	echo "$option"
	pacman -Qqm > AurInstalled
	sort -o AurInstalled AurInstalled

	name=$(sk --bind change:top --layout=reverse --preview "curl -s \"https://aur.archlinux.org/rpc/?v=5&type=search&by=name&arg=\"{}\"\" | jq '.results[]' > tmp && jq 'select(.Name==\"{}\")' < tmp" < AurInstalled )
	[ "$name" ] && sudo pacman "$option" "$name"
	
}

removeCache () {
	echo "Cache directory: ~/config/shaur"
	echo "do you want to remove ALL cached packages? [y/N]"
	read rep
	if [[ "$rep" == "n" || "$rep" == "no" || "$rep" == "N" || "$rep" == "NO"  || "$rep" == "No"  || "$rep" == "nO" ]];then
		echo "interrupting"
	else
		rm -rf */
	fi
	
}

version () (
	echo "shaur version: *"
)

help () (
	echo "Usage:
shaur <operation> (you can use only one option) 

Operations:
	-h --help
	-U --upgrade 		
	-S --sync
	-R --remove
	-C --removeCache
	-V --version
	-y --dbupdate"
)

[ ! "$*" ] && help && exit
option="$1"
case $1 in
	-y | --dbupdate)
		dbupdate
	;;
	-U | --upgrade)
		upgrade
	;;
	-S | --sync)
		sync
	;;
	-R* | --remove)
		remove 
	;;
	-C | --removeCache )
		removeCache
	;;
	-V | --version )
		version
	;;
	-h | --help)
		help
	;;		
	*)
		echo "shaur -> invalid option $*"
		echo "Try shaur -h or --help for more information"
	;;
esac
